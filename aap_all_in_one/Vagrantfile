# -*- mode: ruby -*-
# vi: set ft=ruby :

### Load variables from the config file ###
config_file = File.join(File.dirname(__FILE__), "variables.yml")
vars = YAML.load_file(config_file)

rhel_version = vars['aap_setup_rhel_version']

Vagrant.configure("2") do |config|
  ### Global Configuration  ###
  config.vm.box = "nshaik/rhel" + rhel_version
  config.vm.box_url = "http://content.syslab.pnq2.redhat.com/content/aap/rhel" + rhel_version + "/metadata.json"
  config.vm.provider "libvirt" do |libvirt|
    libvirt.default_prefix = vars['vm_prefix'] || ""
    libvirt.memory = vars['memory']
    libvirt.cpus = vars['cpus']
  end

  ### Configuration related to AAP Controller ###
  config.vm.define vars['ctrl_name'] do |controller|
    controller.vm.hostname = "#{vars['ctrl_name']}.#{vars['domain']}"
    controller.vm.network "private_network", ip: vars['ctrl_ip'], name: vars['libvirt_bridge']
    controller.vm.provision "shell", inline: <<-SHELL
      echo "aap_controller" | tee /etc/server_role
    SHELL
  end

  ### Configuration related to Automation Hub ###
  config.vm.define vars['ah_name'] do |hub|
    hub.vm.hostname = "#{vars['ah_name']}.#{vars['domain']}"
    hub.vm.network  "private_network", ip: vars['ah_ip'], name: vars['libvirt_bridge']
    hub.vm.provision "shell", inline: <<-SHELL
      echo "aap_ah" | tee /etc/server_role
    SHELL
  end

  ### Configuration related to Event Driven Ansible (EDA) ###
  config.vm.define vars['eda_name'] do |eda|
    eda.vm.hostname = "#{vars['eda_name']}.#{vars['domain']}"
    eda.vm.network  "private_network", ip: vars['eda_ip'], name: vars['libvirt_bridge']
    eda.vm.provision "shell", inline: <<-SHELL
      echo "eda_controller" | tee /etc/server_role
    SHELL
  end

  ### Configuration related to external DB ###
  config.vm.define vars['db_name'] do |db|
    db.vm.hostname = "#{vars['db_name']}.#{vars['domain']}"
    db.vm.network  "private_network", ip: vars['db_ip'], name: vars['libvirt_bridge']
    db.vm.provision "shell", inline: <<-SHELL
      echo "aap_db" | tee /etc/server_role
    SHELL
    db.vm.provision "ansible" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.limit = "all"
      ansible.inventory_path = "vagrant.py"
      ansible.playbook = "site.yml"
      ansible.verbose = "vv"
      if !vars['vault_password_file'].nil?
        ansible.vault_password_file = vars['vault_password_file']
      end
    end
  end
end
